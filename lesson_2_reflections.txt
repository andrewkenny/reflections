
What happens when you initialize a repository? Why do you need to do it?

    when a respository is initialized, a .git folder is created within the current folder.
    it does not track any files it isnt't told to track.
    
    This needs to be done so that git can later be given commands to track the changes to this repository.


How is the staging area different from the working directory and the repository? What value do you think it offers?


    the staging area is the files (which are in the working directory) that git will actually track.
    When initialising a project, it is helpful to add files bit by (relevent bit) therefore,
    by adding and removing files from the staging area, files can be commited in a logical order.
    
How can you use the staging area to make sure you have one commit per logical change?
    
    if a programmer has made changes to several files, but wants to commit them seperarly,
    he/she can add 1 or some to the staging area. Only the changes for them files will be counted 
    during the commit.
    
What are some situations when branches would be helpful in keeping your history organized? How would branches help?
    
    Branches are helpful when:
        adding experimental features (a branch per experimental feature)
        allowing multiple users to edit the code (i think)
        
    Branches help by:
        allowing the user to (in their mind) differ from the master by a relevent set of changes.
        a branch per experimental feature ensures that the new features are not interfiering with each other.
        
How do the diagrams help you visualize the branch structure?
    the diagrams help us see what changes the programmer has made. When these changes are in a branch, we can see the intention behind them
    assuming that the branch has a sensible name.
    
    when there are different branches, we can look at the commits to see changes that are in one branch but not another.
    this may cause merge conflicts (but I imagine I will learn about these later.
    
    commits made from other commits (not the branch head) are difficult to navigate to, unless the map can be seen, which allows
    the programmer to see what one has been made. This can then be navigated to, and then perhapse a new branch is made.
    
What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

    Merging 2 branches together means that all of the changes from the 2 branches are now combined into one file.
    this creates a new master (in this case) which has colour and has the coins feature.
    the diagram is usefull, as it allows the reader to follow the changes made.
    I am sure better 2d graphical ones are available though.
    
What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

    the pros of automatic merging are the same pros of any automated process.
    if a programmer doesn't have to do something manually it saves his/her brainpower
    and time.
    
    but if there is any doubt, then manual merging can ensure that the code stays correct.
    
    
    
    
    
    
    